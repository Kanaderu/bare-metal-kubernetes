---
- name: configure master node
  hosts: k8smasters
  tags:
    - config_system
    - config_k8s_master
  tasks:
    - name: configure worker nodes
      include_role:
        name: config-base

- name: configure base systems
  hosts: k8sworkers
  remote_user: rock64
  tags:
    - config_system
    - config_k8s_nodes
  tasks:
    - name: configure base
      include_role:
        name: config-base

- name: configure master node
  hosts: k8smasters
  tags:
    - config_k8s
    - config_k8s_master
  pre_tasks:
    - name: FIXME -- disable selinux for k8s
      selinux:
        policy: targeted
        state: permissive
  tasks:
################
# docker setup
##
    - name: remove podman
      yum:
        name:
          - podman
          - runc
          - buildah
        state: absent
    - name: add docker ce repo
      uri:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/
        status_code:
          - 200
          - 304
    - name: install docker ce
      yum:
        name:
          - docker-ce
        state: present
        update_cache: yes
    - name: add {{ ansible_user }} to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
    - name: install docker compose
      uri:
        url: https://github.com/docker/compose/releases/download/1.27.4/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}
        dest: /usr/local/bin/docker-compose
        mode: '0755'
    - name: create link for docker-compose
      file:
        path: /usr/bin/docker-compose
        src: /usr/local/bin/docker-compose
        state: link

    - name: configure docker with selinux
      copy:
        src: daemon.json
        dest: /etc/docker/
        owner: root
        group: root
        mode: '0600'
    - name: enable docker service
      service:
        name: docker
        state: started
        enabled: yes

####################
# Kubernetes setup
##
    - name: turn off swap now
      command: "swapoff -a"
    - name: turn off swap in fstab
      mount:
        path: none
        fstype: 'swap'
        state: absent
    - name: configure networking for kubernetes
      blockinfile:
        path: /etc/sysctl.d/kubernetes.conf
        block: |
          net.bridge.bridge-nf-call-ip6tables=1
          net.bridge.bridge-nf-call-iptables=1
          net.ipv6.conf.all.forwarding=1
          net.ipv4.conf.all.forwarding=1
        state: present
        create: yes

    # TODO: ?? firewall-cmd --permanent --zone=public --add-masquerade
    - name: open ports in firewall
      firewalld:
        port: "{{ item }}"
        state: enabled
        immediate: yes
        permanent: yes
        zone: public
      loop:
        - "6443/tcp"
        - "2379-2380/tcp"
        - "10250/tcp"
        - "10251/tcp"
        - "10252/tcp"
        - "10255/tcp"
        - "30000-32767/tcp"
        - "2375-2377/tcp"
        - "7946/udp"
        - "4789/udp"
    - name: add kubernetes repo
      copy:
        src: kubernetes.repo
        dest: /etc/yum.repos.d/
    - name: install kubectl kubeadm and kubelet
      yum:
        name:
          - kubeadm
          - kubectl
          - kubelet
        state: present
        update_cache: yes
        disable_excludes: kubernetes
    - name: enable and use kubelet
      service:
        name: kubelet
        state: started
        enabled: yes

    - name: create kubeadm init config
      copy:
        src: kubeadm.yaml
        dest: /root/kubeadm.yml
    - name: kubeadm init
      command: kubeadm init --config /root/kubeadm.yml
      register: token_info
    - name: kubectl join command for nodes
      debug:
        var: token_info
    - name: set join fact
      set_fact:
        k8s_join_cmd: "{{ token_info.stdout_lines[-3:] }}"

    - name: create file
      template:
        src: join_node.sh.j2
        dest: /root/join_node.sh
    - name: put join script on controller
      fetch:
        src: /root/join_node.sh
        dest: /tmp/join_node.sh
        flat: yes


    - name: create .kube config dir
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
    - name: copy k8 config to user dir
      copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

###############
# calico setup
##
    - name: exclude calico ifaces from network manager
      copy:
        src: calico.conf
        dest: /etc/NetworkManager/conf.d/
    - name: install patch
      tags:
        - calico_conf
      yum:
        name:
          - patch
        state: present
    - name: update setup before continuing
      setup:
    # - name: get calico config file
    #   tags:
    #     - calico_conf
    #   uri:
    #     url: https://docs.projectcalico.org/v3.17/manifests/calico.yaml
    #     dest: /root
    #     status_code:
    #       - 200
    #       - 304
    # - name: patch calico config for dual stack ipv4/ipv6
    #   tags:
    #     - calico_conf
    #   patch:
    #     src: calico.diff
    #     dest: /root/calico.yaml
    #     state: present
    - name: calico config file
      tags:
        - calico_conf
      copy:
        src: calico.yaml
        dest: /root/calico.yaml
    - name: install calicoctl
      uri:
        url: https://github.com/projectcalico/calicoctl/releases/download/v3.17.3/calicoctl
        dest: /usr/local/bin/calicoctl
        mode: '0750'
    - name: setup calico pod network
      command: kubectl apply -f /root/calico.yaml
    - name: add calicoctl alias
      lineinfile:
        path: /home/ansible/.bashrc
        regexp: "alias calicoctl"
        line: "alias calicoctl=\"kubectl exec -i -n kube-system calicoctl -- /calicoctl\""

# Service.spec.ipFamilyPolicy: SingleStack, PreferDualStack, RequireDualStack
# ipFamilies:
#   - IPv6
#   - IPv4

- name: configure worker nodes
  hosts: k8sworkers
  tags:
    - config_k8s
    - config_k8s_nodes
  remote_user: rock64
  tasks:
    - name: upload join script
      copy:
        src: /tmp/join_node.sh
        dest: /root/join_node.sh
        owner: root
        group: root
        mode: '0755'
    - name: join cluster
      command: /root/join_node.sh

- name: test nodes joined
  hosts: k8smasters
  tags:
    - config_k8s
    - check_nodes
  tasks:
    - name: check for nodes
      command: kubectl get nodes
