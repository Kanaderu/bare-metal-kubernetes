---

- name: configure a workstation for personal use
  hosts: "{{ workstation }}"
  vars_prompt:
    - name: workstation
      prompt: "Workstation to configure?"
      default: "localhost"
      private: no
  tasks:
    - name: install VS Code
      apt:
        deb: https://go.microsoft.com/fwlink/?LinkID=760868
        state: present

    - name: install Manuskript
      apt:
        deb: https://github.com/olivierkes/manuskript/releases/download/0.14.0/manuskript-0.14.0-1.deb
        state: present

    - name: install MongoDB Compass
      apt:
        deb: https://downloads.mongodb.com/compass/mongodb-compass_1.28.1_amd64.deb
        state: present

    - name: add 32bit arch for adding wine pkgs
      lineinfile:
        dest: /var/lib/dpkg/arch
        line: "i386"
        create: yes
      register: add_i386
    - name: Add wine key to apt
      apt_key:
        url: https://dl.winehq.org/wine-builds/winehq.key
        keyring: /etc/apt/trusted.gpg.d/wine.gpg
        state: present
    - name: Add wine repo
      ansible.builtin.apt_repository:
        repo: deb https://dl.winehq.org/wine-builds/ubuntu/ hirsute main
        state: present

    - name: Add signal apt key
      apt_key:
        url: https://updates.signal.org/desktop/apt/keys.asc
        keyring: /usr/share/keyrings/signal-desktop-keyring.gpg
        state: present
    - name: Add signal repo
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main
        state: present

    - name: Add k8s key to apt
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        keyring: /etc/apt/trusted.gpg.d/google-k8s.gpg
        state: present
    - name: Add k8s repo
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/trusted.gpg.d/google-k8s.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Add an Apt signing key to a specific keyring file
      apt_key:
        url: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
        keyring: /etc/apt/trusted.gpg.d/brave-browser.gpg
        state: present
    - name: create repo for brave
      copy:
        content: "deb [signed-by=/etc/apt/trusted.gpg.d/brave-browser.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
        dest: /etc/apt/sources.list.d/brave-browser-release.list

    - name: add kubuntu backports repo
      command: apt-add-repository --yes --update ppa:kubuntu-ppa/backports
      when: ansible_distribution == 'Ubuntu'

    - name: add ansible repo
      command: sudo add-apt-repository --yes --update ppa:ansible/ansible
      when: ansible_distribution == 'Ubuntu'

    - name: install ProtonVPN repo
      ansible.builtin.apt:
        deb: https://repo.protonvpn.com/debian/dists/stable/main/binary-all/protonvpn-stable-release_1.0.3_all.deb

    - name: install zoom
      ansible.builtin.apt:
        deb: https://zoom.us/client/latest/zoom_amd64.deb

    - name: install balena
      ansible.builtin.apt:
        deb: https://github.com/balena-io/etcher/releases/download/v1.7.9/balena-etcher-electron_1.7.9_amd64.deb

    - name: install goodix fingerprint drivers
      ansible.builtin.apt:
        deb: http://dell.archive.canonical.com/updates/pool/public/libf/libfprint-2-tod1-goodix/libfprint-2-tod1-goodix_0.0.6-0ubuntu1~somerville1_amd64.deb

    - name: install software common
      ansible.builtin.apt:
        name:
          - python
          - python3-pip
          - apt-transport-https
          - autofs
          - basket
          - brave-browser
          - chromium-browser
          - code #vscode
          #- duplicati
          - duplicity
          - firefox
          - fprintd
          - fzf
          - giggle
          - gimp
          - inkscape
          - kdenlive
          - kompare
          - krita
          - kubectl
          - libfprint-2-tod1
          - libfprint-2-2
          - libpam-fprintd
          - libreoffice
          - mkvtoolnix-gui
          - mplayer
          - ohcount
          - protonvpn
          - retext
          - signal-desktop
          - sloccount
          - tldr
          - tmux
          - vim
          - virtualbox
          - virt-manager
          - vlc
          - winbind
#          - winehq-stable
          - yakuake
          - zsh
          - zsh-autosuggestions
          - zsh-syntax-highlighting
        state: present

    - name: install pip packages
      ansible.builtin.pip:
        name:
          - ansible
        state: present

    - name: configure PAM to use the figerprint reader
      ansible.builtin.template:
        src: "{{ item }}"
        dest: /etc/pam.d/
        owner: root
        group: root
        mode: 0644
      loop:
        - "kde.j2"
        - "sddm.j2"

    - name: install oh-my-zsh
      ansible.builtin.command: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

    - name: create destination directory for displaylink drivers
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/DisplayLink-{{ displaylink_version }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_group }}"
        mode: "0755"
        state: directory

    - name: install dev packages for displaylink setup
      ansible.builtin.apt:
        name:
          - libdrm-dev
          - libpciaccess-dev
          - libpciaccess-dev
        state: present

    - name: Download & extract DisplayLink Drivers for docking station
      ansible.builtin.unarchive:
        url: https://synaptics.com/sites/default/files/exe_files/2022-08/DisplayLink%20USB%20Graphics%20Software%20for%20Ubuntu{{ displaylink_version }}-EXE.zip
        dest: "{{ ansible_env.HOME }}/DisplayLink-{{ displaylink_version }}"

    - name: run the binary
      ansible.builtin.shell:
        cmd: sh {{ ansible_env.HOME }}/DisplayLink-{{ displaylink_version }}/displaylink-{{ displaylink_version }}-*.run --accept
      become: yes

    #
    # Script above requests a password be entered if using Secure Boot, reboot required.
    #

    - name: Install snaps
      community.general.snap:
        name:
          - spotify
        classic: yes

    - name: update kubuntu
      ansible.builtin.apt:
        name: "*"
        update_cache: "{{ add_i386.changed }}"
        state: latest

    - name: enable auto.misc
      ansible.builtin.lineinfile:
        path: /etc/auto.master
        regexp: '#/misc'
        line: '/misc        /etc/auto.misc'

    - name: add shares
      ansible.builtin.template:
        src: auto.misc
        dest: /etc/auto.misc
        owner: root
        group: root
        mode: '0644'

    - name: restart autofs
      ansible.builtin.service:
        name: autofs
        state: restarted
        enabled: true
