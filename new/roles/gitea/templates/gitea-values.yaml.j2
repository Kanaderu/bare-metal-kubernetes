replicaCount: 1
clusterDomain: cluster.local

image:
  repository: gitea/gitea
  tag: "{{ gitea_version }}"
  pullPolicy: Always
  rootless: false # only possible when running 1.14 or later

dnsConfig:
  options:
    - name: ndots
      value: "4"

## @section Security
# Security context is only usable with rootless image due to image design
## @param podSecurityContext.fsGroup Set the shared file system group for all containers in the pod.
podSecurityContext:
  fsGroup: 1000

## @param containerSecurityContext Security context
containerSecurityContext:
  #allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  # Add the SYS_CHROOT capability for root and rootless images when using cri-o.
    add:
      - SYS_CHROOT
  privileged: true
  readOnlyRootFilesystem: false
  # runAsGroup: 1000
  # runAsNonRoot: true
  # runAsUser: 1000

## @section Service
service:
  http:
    annotations:
      metallb.universe.tf/allow-shared-ip: "gitea-shared-ip"
    type: LoadBalancer
    port: 3000
    externalTrafficPolicy: Local
    ipFamilyPolicy: PreferDualStack
    ipFamilies:
      - IPv6
      - IPv4
  ssh:
    annotations:
      metallb.universe.tf/allow-shared-ip: "gitea-shared-ip"
    type: LoadBalancer
    port: 2222
    externalTrafficPolicy: Local
    ipFamilyPolicy: PreferDualStack
    ipFamilies:
      - IPv6
      - IPv4

ingress:
  enabled: false
  className: nginx
  hosts:
    - host: git.{{ lan_domain }}
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - git.example.com
  # Mostly for argocd or any other CI that uses `helm template | kubectl apply` or similar
  # If helm doesn't correctly detect your ingress API version you can set it here.
  # apiVersion: networking.k8s.io/v1

persistence:
  enabled: true
  size: 5Gi
  accessModes:
    - ReadWriteMany
  storageClass: cephfs

# Configure commit/action signing prerequisites
## @section Signing
#
## @param signing.enabled Enable commit/action signing
## @param signing.gpgHome GPG home directory
## @param signing.privateKey Inline private gpg key for signed Gitea actions
## @param signing.existingSecret Use an existing secret to store the value of `signing.privateKey`
signing:
  enabled: false
  gpgHome: /data/git/.gnupg
  privateKey: ""
  # privateKey: |-
  #   -----BEGIN PGP PRIVATE KEY BLOCK-----
  #   ...
  #   -----END PGP PRIVATE KEY BLOCK-----
  existingSecret: ""

## @section Gitea
#
gitea:
  admin:
    username: gitea_admin
    password: {{ vault_gitea_admin_password }}
    email: "admin@{{ lan_domain }}"

  ## @param gitea.metrics.enabled Enable Gitea metrics
  ## @param gitea.metrics.serviceMonitor.enabled Enable Gitea metrics service monitor
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      #  additionalLabels:
      #    prometheus-release: prom1

  ## @param gitea.ldap LDAP configuration
  ldap:
    - name: "FreeIPA"
     existingSecret:
     securityProtocol:
     host: "{{ ipa_hostname }}"
     port: 636
     userSearchBase:
     userFilter:
     adminFilter:
     emailAttribute:
     bindDn: "{{ ipa_lookup_user }}"
     bindPassword: "{{ ipa_lookup_password }}"
     usernameAttribute:
     publicSSHKeyAttribute:

  ## @param gitea.config  Configuration for the Gitea server,ref: [config-cheat-sheet](https://docs.gitea.io/en-us/config-cheat-sheet/)
  config: {}
  #  APP_NAME: "Gitea: Git with a cup of tea"
  #  RUN_MODE: dev
  #
  #  server:
  #    SSH_PORT: 22
  #
  #  security:
  #    PASSWORD_COMPLEXITY: spec

  ## @param gitea.ssh.logLevel Configure OpenSSH's log level. Only available for root-based Gitea image.
  ssh:
    logLevel: "INFO"

memcached:
  enabled: true

postgresql:
  enabled: true
  global:
    postgresql:
      auth:
        password: {{ vault_gitea_database_password }}
        database: gitea
        username: gitea
      service:
        ports:
          postgresql: 5432
  primary:
    persistence:
      size: 2Gi
